Stack of routes means stack of pages managed actually by Navigator

Navigator.push:  used for adding routes to the stack(consist of routes) managed by navigator and go to that route cz in stack at the top of stack push and pop occurs

context: it shows the location of the widget in the  widgets tree

Navigator.pop: used to remove the current route from the stack and then the top of stack will be at another route 

Navigator.of(context).pop: it's also used to remove the top route from the stack (context mean current widget context)

Navigator.of(context).pushReplacement: replace the current(top) route of the stack by pushing another given route thus after navigating to the given route the previous route will be disposed

super.initstate: call the initstate method of the parent class from which it is inherited

initstate: it will be called exactly once for each state object it creates (when the statefulWidget is inserted in the widget tree) this method is called once it is the first initial state before build method of the state

buildcontext: reference to the location of a widget in the widget tree

theme.of(buildContext).primaryColor : get the imformation of the theme at this point(widget) and return the data saved in the 'primaryColor' variable in the build-in 'Theme' class

future: It’s a guarantee that a value will exist,but it isn’t quite ready.

Future.then takes a callback, which will be executed when the future value
resolves. In the burger restaurant, the callback is what you decide to do with the
burger when you get it (such as eat it). ex when future is done what code you want to execute

ASYNC AWAIT:
Future<Burger> orderBurgerFromServer() async {
return await prepareBurger();  //prepareBurger takes time  (for the burger to cook). 
When it’s done, return it.

}

***An async function runs synchronously until the first await keyword. This means that within an async function body, all synchronous code before the first await keyword executes immediately.

****Scaffold widget properties:: appBar , body, floatingActionButtion
****AppBar widget properties:: leading , title , actions,

****Callback is basically a function or a method that we pass as an argument into another function or a method to perform an action. In the simplest words, we can say that Callback or VoidCallback are used while sending data from one method to another and vice-versa
